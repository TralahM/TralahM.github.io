I"¥<h1 id="examing-memorystack-and-registers-in-a-simple-c-program-using-gdb">Examing Memory,stack and registers in a simple C program using GDB</h1>

<p>In this post we look at how a reverse engineer can begin reverse engineering by
examining the memory, stack and registers of a running process.</p>

<p>The code is a very simple program to add two integers passed as command
line arguments and prints a string with the result</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</span>
<span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">z</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
    <span class="n">z</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">z</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
    <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
    <span class="n">c</span><span class="o">=</span><span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Sum of %d+%d = %d "</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Compile using the command below and call the executable with some
arguments..</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>gcc <span class="nt">-ggdb</span> <span class="nt">-o</span> memory_demo memory_demo.c
<span class="gp">$</span><span class="w"> </span>./memory_demo 32 23
</code></pre></div></div>

<p>In another separate window lets obtain the process id( <strong>pid</strong> ) of the
program with</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ps <span class="nt">-aux</span> | <span class="nb">grep </span>memory_demo
</code></pre></div></div>

<p>The result should be similar to :</p>

<p><img src="/images/obtain_pid.png" /></p>

<p>In the linux filesystem the <strong>/proc/</strong> contains the runtime information
associated with all running processes and thus you should find a
directory in this directory with a name corresponding to the process id
you obtained above.</p>

<p><img src="/images/proc_pid.png" /></p>

<p>Our interest is the <em>maps</em> file which contains the memory layout in
virtual memory</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /proc/YOUR_PID/maps
</code></pre></div></div>

<p><img src="/images/maps_file.png" /></p>
:ET